SEQUENCE elevator
    SET battery TO 4 column
        FOR EACH column
            SET elevators to 3
            CALL calcFloorsPerColumn WITH battery and floorAmount
            CALL floorAssigned WITH battery and floorAmount
                SET floorAssigned
                FOR EACH elevator in column
                    SET floorsID to 0 to 59 'listed queue for each elevator per column'
                    SET basementFloorsID to 0 to 6
            SET elevatorScreen DISPLAY currentFloor AND alert
            SET outsideScreen DISPLAY floorsID AND alert
            SET openDoor
            SET closeDoor
            SET weightMax TO 1800kg
            SET floorQueue TO empty          
            SET Lobby FROM floorsID TO 0
            SET floorsPanel TO Lobby WITH requestedFloor
                FOR EACH value entered
                ADD requestedFloor TO queue
        END FOR
            SET floorAmount TO 60
            SET basementAmount TO 6
            SET elevatorStatus TO idle
        END FOR
    END FOR


END SEQUENCE


                               'MAIN FUNCTIONS OF THE CONTROLLER'
SEQUENCE requestElevator USING requestFloor AND direction
    CALL findBestColumn WITH floorsPerColumn AND direction RETURNING bestColumn
    CALL findBestElevator WITH currentFloor AND direction RETURNING elevator
    CALL addToFloorQueue with elevator AND floorsID RETURNING floorQueue
    DISPLAY "Embark in" elevator
    CALL moveElevator WITH elevator RETURNING bestElevator
    CALL openDoors
    SET timer TO 10 Seconds
    CALL closeDoors
END SEQUENCE

SEQUENCE requestFloor USING requestedFloor AND direction
    CALL closeDoors
    CALL findBestElevator WITH elevator
    CALL addToFloorQueue WITH floorQueue and requestedFloor
    CALL moveElevator WITH elevator
    CALL openDoors
END SEQUENCE

                            'Settings for more columns'
SEQUENCE calcFloorsPerColumn USING battery AND floorAmount
    'using the first column to calculate'
    SET columnA TO basementfloorsID
        CALCULATE totalColumns MINUS 1 EQUALS remainColumns
        'gives us the average floor per column'
        CALCULATE floorAmount DIVIDED by remainColumns EQUALS floorsRemainColumns 
        RETURN ROUNDED floorsRemainColumns 

SEQUENCE floorAssigned
        SET floorsPerColumn
        SET range TO 0 
            FOR EACH column in battery
                WHILE range is NOT EQUAL TO remainColumns
                COMPUTE floorAssigned EQUALS (floorsRemainColumns MULTIPLIED by range PLUS 1) AND (floorsRemainColumns MULTIPLIED by range PLUS 1)
                    RETURN floorAssigned FOR column
                    ADD 1 TO range
            END WHILE
        END FOR

END SEQUENCE

SEQUENCE findBestColumn USING floorsID AND floorsPerColumn AND requestedFloor
    FOR EACH column
        IF floorsID selected with requestedFloor is a floor in any column
        RETURN BestColumn 
        SET BestColumn TO column

               'trying to get the best elevator possibly the most efficient way possible'
SEQUENCE findBestElevator USING requestedFloor AND battery 
    WHILE bestElevator IS not found
        FOR EACH Elevator in column
            IF currentFloor EQUALS elevatorPosition AND is idle THEN
                RETURN bestElevator
            ELSE IF elevatorStatus is active AND currentFloor is BIGGER OR EQUAL TO elevatorPosition AND direction is up THEN
                RETURN bestElevator
            ELSE IF elevatorStatus is active AND currentFloor is LESSER OR EQUAL to elevatorPosition AND direction is down THEN
                RETURN bestElevator
            ELSE IF elevatorStatus is idle AND currentFloor is NOT EQUAL to elevatorPosition THEN
                CALCULATE absolute difference between elevatorPosition and currentFloor
                    COMPUTE the lowest gap
                        GET Elevator computed
                RETURN bestElevator
            ENDIF
        END FOR
    END WHILE

    SET bestElevator TO elevator 
    RETURN elevator

END SEQUENCE

                                    'QUEUE FOR FLOORS'
                            'using a floorQueue to list the floors'
SEQUENCE addToFloorQueue USING elevator AND requestedFloor
    IF requestedFloor is NOT EQUAL to requestedFloor THEN
        ADD requestedFloor to floorQueue
    ENDIF
END SEQUENCE

                        'sorting the floors in priority and order'
SEQUENCE sortFloorQueue USING floorQueue AND direction
    COMPUTE requestedFloor added TO floorQueue
        IF direction is up THEN
            SORT in ascending order
        ELSE IF direction is down THEN
            SORT in descending order
    ENDIF
        RETURN sortedFloorQueue
END SEQUENCE 


 
    
                                            'MOVEMENT'
SEQUENCE moveElevator USING elevator
    IF weightMax IS BIGGER OR EQUAL TO weightMax
        SET alert to Max capacity reached WITH elevatorScreen THEN
        SET elevatorStatus TO stopped
        CALL openDoor
    ENDIF
    
    SET elevatorStatus TO active
        FOR EACH 
            CALL floorQueue WITH elevator
    REPEAT 
        IF elevatorPosition is EQUAL to requestedFloor THEN
            SET elevatorStatus TO active
            CALL openDoor WITH elevator
            REMOVE floorsID from floorQueue
        IF currentFloor is LESS than requestedFloor THEN
            SET elevatorStatus TO active
		    SET Direction TO Up
                INCREMENT floor by 1
	    ELSE IF currentFloor is MORE than requestedFloor THEN
            SET elevatorStatus TO active
		    SET Direction TO Down
                DECREMENT floor by 1      
    END IF
	    UNTIL currentFloor EQUALS requestedFloor THEN
            CALL openDoor
            REMOVE floorsID from floorQueue
    	
END SEQUENCE



                            'OPENING AND CLOSING DOORS'
SEQUENCE OpenDoor USING elevator
	WAIT UNTIL elevatorStatus IS stopped OR idle on requestedFloor
	SET elevatorStatus TO stopped
        INIT open Door
    SET Timer TO 5 Seconds 
	    WHILE Timer is GREATER than 0 Second OR Door IS Obstructed OR Weight IS GREATER than weightMax
		    KEEP Door Opened
	END WHILE 
END SEQUENCE


SEQUENCE closeDoor USING Elevator
	SET elevatorStatus TO stopped
    INIT close Door
	    WHILE Door IS Closing 
		    IF Obstructed THEN
                SET alert TO Door is obstructed
			        Call OpenDoor WITH Elevator
	END WHILE
	    IF door IS closed THEN
		    SET Elevator elevatorStatus TO idle 
		        INIT idleTimer TO 30 Seconds
	END IF 
END SEQUENCE